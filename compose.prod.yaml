services:

  web: # use alpine 3.22
    image: nginx:mainline-alpine3.22-slim
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    restart: unless-stopped
    networks:
      - blog
    depends_on:
      - post-service
      - user-client

  post-service:
    build:
      context: ./blog-service
      dockerfile: Dockerfile
    container_name: post-api
    ports:
      - "8080:8080"
    restart: unless-stopped    
    env_file:
      - ./blog-service/.env
    networks:
      - blog
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:latest
    env_file:
      - ./blog-service/.env
    volumes:
      - ./blog-service/pgdata:/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postuser -d postdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - blog
    
  user-client:
    build:
      context: ./blog-client
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://post-service:8080
    container_name: user-client
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - blog
    environment:
      - NEXT_PUBLIC_API_URL=/api
    depends_on:
      - post-service


networks:
  blog:
    driver: bridge

volumes:
  pgdata: